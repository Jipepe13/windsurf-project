import { moderationService } from '../src/services/moderationService';
import { authService } from '../src/services/authService';

async function testModeration() {
  try {
    console.log('üöÄ D√©marrage des tests de mod√©ration...');

    // 1. Cr√©ation des utilisateurs de test
    console.log('\n1Ô∏è‚É£ Cr√©ation des utilisateurs de test...');
    
    const admin = await authService.register({
      name: 'Admin Test',
      email: 'admin@test.com',
      password: 'password123',
    });

    const moderator = await authService.register({
      name: 'Moderator Test',
      email: 'mod@test.com',
      password: 'password123',
    });

    const user1 = await authService.register({
      name: 'User Test 1',
      email: 'user1@test.com',
      password: 'password123',
    });

    const user2 = await authService.register({
      name: 'User Test 2',
      email: 'user2@test.com',
      password: 'password123',
    });

    console.log('‚úÖ Utilisateurs cr√©√©s avec succ√®s');

    // 2. Connexion en tant qu'admin
    console.log('\n2Ô∏è‚É£ Connexion en tant qu\'admin...');
    const adminLogin = await authService.login({
      email: 'admin@test.com',
      password: 'password123',
    });
    console.log('‚úÖ Connect√© en tant qu\'admin');

    // 3. Promotion d'un mod√©rateur
    console.log('\n3Ô∏è‚É£ Promotion d\'un utilisateur en mod√©rateur...');
    await moderationService.promoteModerator(moderator.id);
    console.log('‚úÖ Mod√©rateur promu avec succ√®s');

    // 4. Test des fonctionnalit√©s de mod√©ration
    console.log('\n4Ô∏è‚É£ Test du bannissement...');
    await moderationService.banUser(user1.id, {
      reason: 'Test de bannissement',
      duration: 24,
    });
    console.log('‚úÖ Utilisateur banni avec succ√®s');

    // 5. V√©rification de l'historique des bans
    console.log('\n5Ô∏è‚É£ V√©rification de l\'historique des bans...');
    const banHistory = await moderationService.getBanHistory(user1.id);
    console.log('Historique des bans:', banHistory);

    // 6. Test du syst√®me de signalement
    console.log('\n6Ô∏è‚É£ Test du syst√®me de signalement...');
    await moderationService.reportUser(user2.id, 'Test de signalement');
    console.log('‚úÖ Utilisateur signal√© avec succ√®s');

    // 7. V√©rification des signalements
    console.log('\n7Ô∏è‚É£ V√©rification des signalements...');
    const reports = await moderationService.getReports();
    console.log('Signalements:', reports);

    // 8. R√©solution d'un signalement
    console.log('\n8Ô∏è‚É£ R√©solution du signalement...');
    if (reports.length > 0) {
      await moderationService.resolveReport(reports[0].id, 'Test de r√©solution');
      console.log('‚úÖ Signalement r√©solu avec succ√®s');
    }

    // 9. D√©bannissement
    console.log('\n9Ô∏è‚É£ Test du d√©bannissement...');
    await moderationService.unbanUser(user1.id);
    console.log('‚úÖ Utilisateur d√©banni avec succ√®s');

    // 10. R√©vocation du mod√©rateur
    console.log('\nüîü R√©vocation du mod√©rateur...');
    await moderationService.revokeModerator(moderator.id);
    console.log('‚úÖ Mod√©rateur r√©voqu√© avec succ√®s');

    console.log('\n‚ú® Tous les tests sont termin√©s avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter les tests
testModeration();
